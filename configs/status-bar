#!/bin/bash

# commands for restarting status-bar to test changes
# sudo kill -9 $(ps aux | grep /data/dwm/status-bar | grep -v grep | awk '{print $2}')
# exec /data/dwm/status-bar &

# load colors:
col_white=#edeff1
# col_rosewater=#f2d5cf
col_flamingo=#eebebe
col_pink=#f4b8e4
col_mauve=#ca9ee6
col_red=#e78284
col_maroon=#ea999c
# col_peach=#ef9f76
# col_yellow=#e5c890
# col_green=#a6d189
col_teal=#81c8be
col_sky=#99d1db
col_sapphire=#85c1dc
col_blue=#8caaee
col_lavender=#babbf1
# col_text=#c6d0f5
# col_subtext1=#b5bfe2
# col_subtext0=#a5adce
# col_overlay2=#949cbb
# col_overlay1=#838ba7
# col_overlay0=#737994
# col_surface2=#626880
# col_surface1=#51576d
# col_surface0=#414559
# col_base=#303446
# col_mantle=#292c3c
# col_crust=#232634

base=$col_white

col_network_download=$col_sky
col_network_upload=$col_teal

col_internet_wifi=$col_sapphire
col_internet_wifi_down=$col_red
col_internet_wifi_off=$col_maroon
col_internet_ethernet=$col_lavender
col_internet_ethernet_down=$col_red
col_internet_vpn=$col_blue 

col_volume_high=$col_lavender
col_volume_medium=$col_lavender
col_volume_low=$col_lavender
col_volume_mute=$col_red
col_volume_unknown=$col_white

col_brightness=$col_mauve

col_battery_full=$col_pink
col_battery_discharging=$col_pink
col_battery_charging=$col_pink
col_battery_not_charging=$col_red
col_battery_unknown=$col_white

col_timestamp=$col_flamingo

network_traffic() {
  # https://github.com/LukeSmithxyz/voidrice/tree/master/.local/bin/statusbar
  # Module showing network traffic. Shows how much data has been received (RX) or
  # transmitted (TX) since the previous time this script ran. So if run every
  # second, gives network traffic per second.

  update() {
    sum=0
    for arg; do
        read -r i < "$arg"
        sum=$(( sum + i ))
    done
    cache=/tmp/${1##*/}
    [ -f "$cache" ] && read -r old < "$cache" || old=0
    printf %d\\n "$sum" > "$cache"
    printf %d\\n $(( sum - old ))
  }

  rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
  tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)
  printf "^c$col_network_download^󰄠 ^c$base^%4sB ^c$base^/ ^c$col_network_upload^󰄝^c$base^ %4sB\\n" "$(numfmt --to=iec $rx)" "$(numfmt --to=iec $tx)"
}
#endregion

internet() {
  # https://github.com/LukeSmithxyz/voidrice/tree/master/.local/bin/statusbar
  # Show wifi 󰤨 and percent strength or 󰤭 if none.
  # Show 󰈁 if connected to ethernet or 󰈂 if none.
  # Show 󰌆 if a vpn connection is active

  if grep -xq 'up' /sys/class/net/w*/operstate 2>/dev/null ; then
    # measure wifi strength
	  val_internet="$(awk '/^\s*w/ {print int($3 * 100 / 70)}' /proc/net/wireless)"
    icon="^c$col_internet_wifi^󰤨"
  elif grep -xq 'down' /sys/class/net/w*/operstate 2>/dev/null ; then
    grep -xq '0x1003' /sys/class/net/w*/flags && icon="^c$col_internet_wifi_down^󰤭" || icon="^c$col_internet_wifi_off^󰀝"
  fi

  printf "^c$base^/ %s ^c$base^%s%%%s%s\n" "$icon" "$val_internet" "$(sed "s/down/[^c$col_internet_ethernet_down^󰈂]/;s/up/[^c$col_internet_ethernet^󰈁]/" /sys/class/net/e*/operstate 2>/dev/null)" "$(sed "s/.*/[^c$col_internet_vpn^󰌆]/" /sys/class/net/tun*/operstate 2>/dev/null)"
}

volume() {
  # https://github.com/LukeSmithxyz/voidrice/tree/master/.local/bin/statusbar
  # Prints the current volume or 󰖁 if muted.

  if [[ "$(amixer sget Master | awk -F\"[][]\" '/%/' | head -n1 | awk '{print $6}')" = "[off]" ]]; then
    icon="󰖁"
    printf "^c$base^| ^c$col_volume_mute^%s" "$icon"
  else
    # void linux:
    val_volume="$(amixer sget Master | awk -F\"[][]\" '/%/' | head -n1 | awk '{print $4}' | sed 's/[[]//g' | sed 's/[%]]//g')"
    # arch linux:
    # val_volume="$(amixer sget Master | awk -F\"[][]\" '/%/' | head -n1 | awk '{print $5}' | sed 's/[[]//g' | sed 's/%]//g')"

    if [[ "$val_volume" -gt "70" ]]; then 
      icon="^c$col_volume_high^󰕾";
    elif [[ "$val_volume" -gt "30" ]]; then 
      icon="^c$col_volume_medium^󰖀";
    elif [[ "$val_volume" -gt "0" ]]; then 
      icon="^c$col_volume_low^󰕿";
    else 
      icon="^c$col_volume_unknown^󰸈";
    fi

    printf "^c$base^| %s ^c$base^%s%%" "$icon" "$val_volume"
  fi
} 

brightness() {
  val_brightness=$(echo $(( 100 * $(cat /sys/class/backlight/*/brightness) / $(cat /sys/class/backlight/*/max_brightness))))
  printf "^c$base^| ^c$col_brightness^󰖨  ^c$base^%s%%" "$val_brightness"    
}

battery() {
  # https://github.com/LukeSmithxyz/voidrice/tree/master/.local/bin/statusbar
  # Prints all batteries, their percentage remaining and an emoji corresponding
  # to charge status ( for plugged in, 󰁿 for discharging on battery, etc.).

  # Loop through all attached batteries and format the info
  for battery in /sys/class/power_supply/BAT?*; do
    # If non-first battery, print a space separator.
    [ -n "${val_battery+x}" ] && printf " "
    # Sets up the status and capacity
    case "$(cat "$battery/status" 2>&1)" in
      "Full") status="^c$col_battery_full^󰂄" ;;
      "Discharging") status="^c$col_battery_discharging^󰁿" ;;
      "Charging") status="^c$col_battery_charging^󰚥" ;;
      "Not charging") status="^c$col_battery_not_charging^󰅜" ;;
      "Unknown") status="^c$col_battery_unknown^󱎝" ;;
      *) exit 1 ;;
    esac

    val_battery="$(cat "$battery/capacity" 2>&1)"
    # Will set variable to warn if discharging and low
    [ "$status" = "^c$yellow^󰁿" ] && [ "$val_battery" -le 25 ] && status="^c$col_battery_low_warning^󰂃"
    # Prints the info
    printf "^c$base^| %s ^c$base^%s%%" "$status" "$val_battery"
  done && printf "\\n"
}

timestamp() {
  # https://devhints.io/datetime
  # Prints out date in this format: "Sun Sep 25 / 02:25:34"
  printf "^c$base^| ^c$col_timestamp^󰑐 ^c$base^%s " "$(date '+%a %b %e / %I:%M:%S')"
}

while true; do
  sleep 1 && xsetroot -name "$(network_traffic) $(internet) $(volume) $(brightness) $(battery) $(timestamp)" 
done
